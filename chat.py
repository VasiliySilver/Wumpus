import json
import random

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import motor.motor_asyncio
import traceback

from bot import config
from bot.session import Session

""" –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π """

# """ –ö–ª—é—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π """
cluster = config.CLUSTER
client = motor.motor_asyncio.AsyncIOMotorClient(cluster)

""" –ë–∞–∑–∞ —Å –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞—é """

db = client["test"]

""" –¢–∞–±–ª–∏—Ü–∞ —Å –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞—é """
wumpus = db.wumpus

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

""" –ì–õ–ê–í–ù–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê (–ù–ò–ó)"""


def MainKeyboard() -> types.ReplyKeyboardMarkup:
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    first = ('GitHub –ø—Ä–æ–µ–∫—Ç–∞ üè†',
             '–ü–æ–º–æ—â—å‚ùì')
    second = ('WikiüìÉ',
              '–ö–æ–Ω—Ç–∞–∫—Ç—ã')
    third = '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É üè∞'
    keyboard_markup.row(*(types.KeyboardButton(text) for text in first))
    keyboard_markup.row(*(types.KeyboardButton(text) for text in second))
    keyboard_markup.row(third)
    return keyboard_markup


""" –ö–õ–ê–í–ò–ê–¢–£–†–ê –ö–û–ù–¶–ê –ò–ì–†–´ (–ù–ò–ó) """


def FinishKeyboard() -> types.ReplyKeyboardMarkup:
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    first = ('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É üè∞',
             '–°—á—ë—Ç')
    third = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè∞'
    keyboard_markup.row(*(types.KeyboardButton(text) for text in first))
    keyboard_markup.row(third)
    return keyboard_markup


''' –°–û–û–ë–©–ï–ù–ò–Ø –ò –°–°–´–õ–ö–ò '''

HELLO_MESSAGE = '''–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∏–≥—Ä–∞ –≤ –û—Ö–æ—Ç—É –Ω–∞ –í–∞–º–ø—É—Å–∞! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? '''

GIT_HUB_LINK = '''[ ](https://github.com/VasiliySilver/Wumpus) –ó–¥–µ—Å—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞ '''

''' –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ –°–¢–ê–†–¢ '''

HELP_TEXT = ''' 1 - –í –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã –∏–≥—Ä–æ–∫ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ–¥–Ω—É –∏–∑ –∫–æ–º–Ω–∞—Ç –ø–µ—â–µ—Ä—ã.
2 - –ó–∞ —Ö–æ–¥ –æ–Ω –º–æ–∂–µ—Ç –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –≤ –æ–¥–Ω—É –∏–∑ –∫–æ–º–Ω–∞—Ç –ª–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å.
3 - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–µ–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ, –≤—Å–µ–≥–æ –∏—Ö 5, –µ—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–π –∏–≥—Ä–æ–∫ –ø–æ–≥–∏–±–∞–µ—Ç.
4 - –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö —Ä–∞—Å—Ç–∞–≤–ª–µ–Ω—ã –ª–æ–≤—É—à–∫–∏.
5 - –í –∫–æ–º–Ω–∞—Ç–∞—Ö –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª—é—Ç—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–≤—É—à–µ–∫ –∏–ª–∏ –ø–æ–∫—É–ø–∫–∏ —Å—Ç—Ä–µ–ª.
–£–î–ê–ß–ò!
'''

WIKI_LINK = '''[ ](https://ru.wikipedia.org/wiki/Hunt_the_Wumpus)–ú–∏—Ä ¬´Hunt the Wumpus¬ª ‚Äî —ç—Ç–æ –ø–µ—â–µ—Ä–∞ –∏–∑ 20 
–ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ —Ç–æ–Ω–Ω–µ–ª—è–º–∏ —Å —Ç—Ä–µ–º—è –¥—Ä—É–≥–∏–º–∏, —Ç. –µ. –ø–µ—â–µ—Ä–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π 
—Ä–∞—Å–ø–ª—é—â–µ–Ω–Ω—ã–π –¥–æ–¥–µ–∫–∞—ç–¥—Ä (–≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ø–æ–ª–æ–≥–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∏–∫–æ—Å–∞—ç–¥—Ä–µ, –ª–∏—Å—Ç–µ –ú—ë–±–∏—É—Å–∞, 
–ø—á–µ–ª–∏–Ω—ã—Ö —Å–æ—Ç–∞—Ö –∏ –¥—Ä.)[2]. –í –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–Ω–∞—Ç –ø–µ—â–µ—Ä—ã. –ó–∞ —Ö–æ–¥ –æ–Ω 
–º–æ–∂–µ—Ç –ª–∏–±–æ –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –≤ –æ–¥–Ω—É –∏–∑ —Ç—Ä—ë—Ö —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–æ–º–Ω–∞—Ç, –ª–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –∏–∑ –Ω–∏—Ö. '''

''' –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ –°–¢–ê–†–¢ '''


@dp.message_handler(commands='start')
async def start_cmd_handler(message: types.Message, state):
    try:
        user = await db.wumpus.find_one({'tgid': {'$eq': message.from_user.id}})
        if user is None:
            await db.wumpus.insert_one({'tgid': message.from_user.id})
        await bot.send_message(message.from_user.id, HELLO_MESSAGE, reply_markup=MainKeyboard(), parse_mode='Markdown')
        await state.finish()
    except Exception as ex:
        print(ex)
        print(traceback.format_exc())
        await bot.send_message(message.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, ü§∑üèº‚Äç‚ôÄÔ∏è –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
                               reply_markup=MainKeyboard())


@dp.message_handler(commands='start', state="*")
async def start_restart_fix_cmd_handler(message: types.Message, state):
    try:
        await bot.send_message(message.from_user.id, HELLO_MESSAGE, reply_markup=MainKeyboard())
        await state.finish()
    except Exception as ex:
        print(ex)
        print(traceback.format_exc())
        await state.finish()
        await bot.send_message(message.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, ü§∑üèº‚Äç‚ôÄÔ∏è –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
                               reply_markup=MainKeyboard())


''' –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–õ–ê–í–ù–û–ô –ö–õ–ê–í–ò–ê–¢–£–†–´ –°–û–û–ë–©–ï–ù–ò–Ø –° –ö–ù–û–ü–û–ö '''


@dp.message_handler()
async def main_keyboard(message: types.Message, state):
    try:
        if message.text not in ['–ù–∞—á–∞—Ç—å –∏–≥—Ä—É üè∞', 'GitHub –ø—Ä–æ–µ–∫—Ç–∞ üè†', '–ü–æ–º–æ—â—å‚ùì', 'WikiüìÉ', '–ö–æ–Ω—Ç–∞–∫—Ç—ã', '1', '2',
                                '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18',
                                '19', '20']:
            await bot.send_message(message.from_user.id,
                                   '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, —è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∏ –∑–∞–±—ã–ª –Ω–∞ —á—ë–º –º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å.\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!',
                                   reply_markup=MainKeyboard())

        if message.text == '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É üè∞':
            # –Ω–∞—á–∏–Ω–∞—é —Å–µ—Å—Å–∏—é
            session = Session(message.from_user.id)
            json_data_session = session.to_json()
            await db.wumpus.update_one({"tgid": message.from_user.id}, {"$set": {"session": json_data_session}})

            from pprint import pprint
            pprint(session.cave.dict_rooms)

            print(session.wumpus.location, 'WUMPUS LOCATION')
            print(session.player.location, 'PLAYER LOACTION')

            # –ø–æ–ª—É—á–∞—é –ª–æ–∫–∞—Ü–∏–∏ –º—ã—à–µ–π, –∑–æ–ª–æ—Ç–∞ –∏ –ª–æ–≤—É—à–µ–∫
            bats_locations = [i.location for i in session.bats]
            golds_locations = [i.location for i in session.golds]
            traps_locations = [i.location for i in session.traps]

            # –ø–æ–ª—É—á–∞—é list(list,list..)
            bats_room_connects = sum([i.room_connects for i in session.golds], [])
            golds_room_connects = sum([i.room_connects for i in session.golds], [])
            traps_room_connects = sum([i.room_connects for i in session.traps], [])

            # –ø–µ—Ä–µ–≤–æ–∂—É –∑–Ω–∞—á–µ–Ω–∏—è –≤ integer
            bats_room_connects_int = [int(i) for i in bats_room_connects]
            golds_room_connects_int = [int(i) for i in golds_room_connects]
            traps_room_connects_int = [int(i) for i in traps_room_connects]

            print(golds_locations, 'golds')
            print(bats_locations, 'bats')
            print(traps_locations, 'traps')

            # –≤ –∫–æ–º–Ω–∞—Ç–µ —Ä—è–¥–æ–º –µ—Å—Ç—å –∑–æ–ª–æ—Ç–æ –∏–ª–∏ –º—ã—à–∏ –∏–ª–∏ –ª–æ–≤—É—à–∫–∞
            player_in_gold_room_connects = int(session.player.location) in bats_room_connects_int
            player_in_bats_room_connects = int(session.player.location) in golds_room_connects_int
            player_in_traps_room_connects = int(session.player.location) in traps_room_connects_int

            # –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            keyboard_markup = types.InlineKeyboardMarkup()

            wumpus_is_near = session.check_that_wumpus_is_near()

            print(session.player.location)
            print(session.player.location)

            await check_if_player_in_bats_room_connects(keyboard_markup, message, session, player_in_bats_room_connects)

            await check_if_player_in_gold_room_connects(keyboard_markup, message, session, player_in_gold_room_connects)

            await check_if_player_in_traps_room_connects(keyboard_markup, message, session,
                                                         player_in_traps_room_connects)

            if wumpus_is_near:
                keyboard_markup.add(types.InlineKeyboardButton('–°—Ç—Ä–µ–ª—è—Ç—å',
                                                               callback_data='shot'))
                keyboard_markup.add(types.InlineKeyboardButton('–ò–¥—Ç–∏ –¥–∞–ª—å—à–µ',
                                                               callback_data='move_on'))

                await bot.send_message(message.from_user.id, wumpus_is_near,
                                       reply_markup=keyboard_markup, parse_mode='Markdown')

            else:
                player_choices = session.get_player_choices()

                for player_choice in player_choices:
                    keyboard_markup.add(
                        types.InlineKeyboardButton(str(player_choice), callback_data=f'next_room{player_choice}'))

                await bot.send_message(message.from_user.id, session.get_message_for_player_choices(),
                                       reply_markup=keyboard_markup, parse_mode='Markdown')

        if message.text == 'GitHub –ø—Ä–æ–µ–∫—Ç–∞ üè†':
            await bot.send_message(message.from_user.id, GIT_HUB_LINK, reply_markup=MainKeyboard(), parse_mode='Markdown')
            state.finish()
        if message.text == 'WikiüìÉ':
            await bot.send_message(message.from_user.id, WIKI_LINK, reply_markup=MainKeyboard(), parse_mode='Markdown')
            state.finish()

        if message.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ã':
            pass
        if message.text == '–ü–æ–º–æ—â—å‚ùì':
            await bot.send_message(message.from_user.id, HELP_TEXT, reply_markup=MainKeyboard())
    except Exception as ex:
        print(ex)
        print(traceback.format_exc())
        await bot.send_message(message.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, ü§∑üèº‚Äç‚ôÄÔ∏è –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
                               reply_markup=MainKeyboard())


''' CALLBACK –î–õ–Ø –í–´–ë–û–†–ê –ö–û–ú–ù–ê–¢ '''
list_rooms = ['next_room1', 'next_room2', 'next_room3', 'next_room4', 'next_room5', 'next_room6', 'next_room7',
              'next_room8', 'next_room9', 'next_room10', 'next_room11', 'next_room12', 'next_room13', 'next_room14',
              'next_room15', 'next_room16', 'next_room17', 'next_room18', 'next_room19', 'next_room20']


@dp.callback_query_handler(lambda cb: cb.data in list_rooms)
async def next_room(query: types.CallbackQuery):
    try:
        print('–í–´–ë–û–† –ö–û–ú–ù–ê–¢–´')

        # –ø–æ–ª—É—á–∞—é –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        player_choice_number, session = await get_session_and_player_choice_number(query)

        from pprint import pprint
        pprint(session.cave.dict_rooms)

        print(player_choice_number, 'palyer_choice_number')

        # –ø–µ—Ä–µ—Ö–æ–∂—É –≤ –∫–æ–º–Ω–∞—Ç—É –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        session.player_moves_to_another_room(player_choice_number)

        print(session.wumpus.location, 'WUMPUS LOCATION')
        print(session.player.location, 'PLAYER LOCATION')

        # –ø–æ–ª—É—á–∞—é –ª–æ–∫–∞—Ü–∏–∏ –º—ã—à–µ–π, –∑–æ–ª–æ—Ç–∞ –∏ –ª–æ–≤—É—à–µ–∫
        bats_locations = [i.location for i in session.bats]
        golds_locations = [i.location for i in session.golds]
        traps_locations = [i.location for i in session.traps]

        # –ø–æ–ª—É—á–∞—é list(list,list..)
        bats_room_connects = sum([i.room_connects for i in session.golds], [])
        golds_room_connects = sum([i.room_connects for i in session.golds], [])
        traps_room_connects = sum([i.room_connects for i in session.traps], [])

        # –ø–µ—Ä–µ–≤–æ–∂—É –∑–Ω–∞—á–µ–Ω–∏—è –≤ integer
        bats_room_connects_int = [int(i) for i in bats_room_connects]
        golds_room_connects_int = [int(i) for i in golds_room_connects]
        traps_room_connects_int = [int(i) for i in traps_room_connects]

        print(golds_locations, 'golds')
        print(bats_locations, 'bats')
        print(traps_locations, 'traps')

        # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∏–≥—Ä–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ —Å –∑–æ–ª–æ—Ç–æ–º –∏–ª–∏ –º—ã—à–∞–º–∏ –∏–ª–∏ –ø–æ–ø–∞–ª –≤ –ª–æ–≤—É—à–∫—É
        player_in_gold_location = int(session.player.location) in [int(i.location) for i in session.golds]
        player_in_bats_location = int(session.player.location) in [int(i.location) for i in session.bats]
        player_in_traps_location = int(session.player.location) in [int(i.location) for i in session.traps]

        # –≤ –∫–æ–º–Ω–∞—Ç–µ —Ä—è–¥–æ–º –µ—Å—Ç—å –∑–æ–ª–æ—Ç–æ –∏–ª–∏ –º—ã—à–∏ –∏–ª–∏ –ª–æ–≤—É—à–∫–∞
        player_in_gold_room_connects = int(session.player.location) in bats_room_connects_int
        player_in_bats_room_connects = int(session.player.location) in golds_room_connects_int
        player_in_traps_room_connects = int(session.player.location) in traps_room_connects_int

        player_in_wumpus_location = int(session.player.location) == int(session.wumpus.location)

        # –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard_markup = types.InlineKeyboardMarkup()

        # –µ—Å—Ç—å –ª–∏ –≤–∞–º–ø—É—Å –≤ —Å–æ—Å–µ–¥–Ω–µ–π –∫–æ–º–Ω–∞—Ç–µ
        wumpus_is_near = session.check_that_wumpus_is_near()

        await check_if_player_in_gold_room_connects(keyboard_markup, query, session, player_in_gold_room_connects)

        await check_if_player_in_bats_room_connects(keyboard_markup, query, session, player_in_bats_room_connects)

        await check_if_player_in_traps_room_connects(keyboard_markup, query, session, player_in_traps_room_connects)

        await check_if_wumpus_in_room_connects(keyboard_markup, query, wumpus_is_near)

        await check_if_player_in_bats_location(keyboard_markup, query, session, player_in_bats_location)

        await check_if_player_in_gold_location(keyboard_markup, query, session, player_in_gold_location)

        await check_if_player_in_trap_location(keyboard_markup, query, session, player_in_traps_location)

        await check_if_player_in_wumpus_location(query, player_in_wumpus_location)

        if not player_in_wumpus_location:
            if not player_in_bats_location:
                if not player_in_traps_location:
                    if not player_in_gold_location:
                        player_choices = session.get_player_choices()

                        for player_choice in player_choices:
                            keyboard_markup.add(
                                types.InlineKeyboardButton(str(player_choice),
                                                           callback_data=f'next_room{player_choice}'))

                        await bot.send_message(query.from_user.id, session.get_message_for_player_choices(),
                                               reply_markup=keyboard_markup, parse_mode='Markdown')

    except Exception as ex:
        print(ex)
        print(traceback.format_exc())
        await bot.send_message(query.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, ü§∑üèº‚Äç‚ôÄÔ∏è –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
                               reply_markup=MainKeyboard())


async def check_if_player_in_bats_location(keyboard_markup, query, session, check):
    if check:
        # –ø—Ä–æ–≤–µ—Ä—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º—ã—à–µ–π
        bat_location = session.player.location
        # –º–µ–Ω—è—é –ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session.bat_change_player_location()

        answer = f''' 
                    –í–ù–ï–ó–ê–ü–ù–û –¢–ï–ë–Ø –ü–û–î–•–í–ê–¢–ò–õ–ê –û–ì–†–û–ú–ù–ê–Ø –ú–´–®–¨ –ò –£–ù–ï–°–õ–ê –í –ù–ï–ò–ó–í–ï–°–¢–ù–û–ú –ù–ê–ü–†–í–°–õ–ï–ù–ò–ò...
                    –ü—Ä–æ—Å–Ω—É–≤—à–∏—Å—å —Ç—ã –æ–∫–∞–∑–∞–ª—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ {session.player.location}
                    –í—ã–±–µ—Ä–∏ –∫–æ–º–Ω–∞—Ç—É {session.get_player_choices()}
                    '''

        player_choices = session.get_player_choices()

        for player_choice in player_choices:
            keyboard_markup.add(
                types.InlineKeyboardButton(str(player_choice), callback_data=f'next_room{player_choice}'))

        await bot.send_message(query.from_user.id, answer, reply_markup=keyboard_markup, parse_mode='Markdown')


async def check_if_wumpus_in_room_connects(keyboard_markup, query, wumpus_is_near):
    if wumpus_is_near:
        keyboard_markup.add(types.InlineKeyboardButton('–°—Ç—Ä–µ–ª—è—Ç—å', callback_data='shot'))
        keyboard_markup.add(types.InlineKeyboardButton('–ò–¥—Ç–∏ –¥–∞–ª—å—à–µ', callback_data='move_on'))

        await bot.send_message(query.from_user.id, wumpus_is_near, parse_mode='Markdown')


async def check_if_player_in_bats_room_connects(keyboard_markup, query, session, check):
    if check:
        answer = ''' –ö–ê–ñ–ï–¢–°–Ø –í –°–û–°–ï–î–ù–ï–ô –ö–û–ú–ù–ê–¢–ï –ö–ê–ö–ò–ï-–¢–û –°–¢–†–ê–ù–ù–´–ï –ó–í–£–ö–ò '''

        await bot.send_message(query.from_user.id, answer, parse_mode='Markdown')


async def check_if_player_in_traps_room_connects(keyboard_markup, query, session, check):
    if check:
        answer = ''' –í –û–î–ù–û–ô –ò–ó –ö–û–ú–ù–ê–¢ –î–£–ï–¢ –í–ï–¢–ï–†, –ö–£–î–ê –ü–û–ô–î–Å–ú '''

        await bot.send_message(query.from_user.id, answer, parse_mode='Markdown')


async def check_if_player_in_gold_room_connects(keyboard_markup, query, session, check):
    if check:
        GOLD_IN_NEAR_ROOM = '–í –ö–û–ú–ù–ê–¢–ï –†–Ø–î–û–ú –ï–°–¢–¨ –ó–û–õ–û–¢–û, –ö–£–î–ê –ü–û–ô–î–Å–ú?)'

        await bot.send_message(query.from_user.id, GOLD_IN_NEAR_ROOM, parse_mode='Markdown')


async def check_if_player_in_gold_location(keyboard_markup, query, session, check):
    if check:
        answer = '–í –ö–û–ú–ù–ê–¢–ï –ï–°–¢–¨ –ó–û–õ–û–¢–û, –°–´–ì–†–ê–ô –í –ò–ì–†–£ –ß–¢–û–ë–´ –î–û–ö–£–ü–ò–¢–¨ –°–¢–†–ï–õ–´'
        keyboard_markup.add(types.InlineKeyboardButton('–°—ã–≥—Ä–∞—Ç—å', callback_data='play_gold'))
        keyboard_markup.add(types.InlineKeyboardButton('–ò–¥—Ç–∏ –¥–∞–ª—å—à–µ', callback_data='move_on'))

        await bot.send_message(query.from_user.id, answer, reply_markup=keyboard_markup, parse_mode='Markdown')


async def check_if_player_in_trap_location(keyboard_markup, query, session, check):
    if check:
        answer = '–ö–ê–ö –¢–û–õ–¨–ö–û –¢–´ –í–û–®–Å–õ –ö–û–ú–ù–ê–¢–ê –ó–ê–ö–†–´–õ–ê–°–¨, –ù–ê –î–í–ï–†–ò –ó–ê–ú–û–ö –£–ì–ê–î–ê–ô –ß–ò–°–õ–û'
        keyboard_markup.add(types.InlineKeyboardButton('–£–ì–ê–î–ê–¢–¨', callback_data='play_gold'))

        await bot.send_message(query.from_user.id, answer, reply_markup=keyboard_markup, parse_mode='Markdown')


async def check_if_player_in_wumpus_location(query, check):
    if check:
        answer = '–í–´ –ü–†–û–ò–ì–†–ê–õ–ò –ü–û–ü–ê–í –í –õ–û–í–£–®–ö–£ –ö –í–ê–ú–ü–£–°–£, –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê!!!'

        await bot.send_message(query.from_user.id, answer, reply_markup=FinishKeyboard(), parse_mode='Markdown')


''' –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò –î–í–ò–ì–ê–¢–¨–°–Ø –î–ê–õ–¨–®–ï '''


@dp.callback_query_handler(lambda cb: cb.data in ['move_on'])
async def move_on(query: types.CallbackQuery):
    try:
        print('–î–í–ò–ì–ê–¢–¨–°–Ø –î–ê–õ–¨–®–ï')
        # –ø–æ–ª—É—á–∞—é –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        player_choice_number, session = await get_session_and_player_choice_number(query)

        # –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard_markup = types.InlineKeyboardMarkup()

        player_choices = session.get_player_choices()

        for player_choice in player_choices:
            keyboard_markup.add(types.InlineKeyboardButton(str(player_choice),
                                                           callback_data=f'next_room{player_choice}'))

        await bot.send_message(query.from_user.id, session.get_message_for_player_choices(),
                               reply_markup=keyboard_markup, parse_mode='Markdown')
    except Exception:
        print(traceback.format_exc())
        await bot.send_message(query.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, ü§∑üèº‚Äç‚ôÄÔ∏è –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
                               reply_markup=MainKeyboard())


''' –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò –í–´–ë–û–†–ê –í–´–°–¢–†–ï–õ–ê shot '''


@dp.callback_query_handler(lambda cb: cb.data in ['shot'])
async def shot(query: types.CallbackQuery):
    try:
        # –ø–æ–ª—É—á–∞—é –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print('–í–´–°–¢–†–ï–õ')
        print(query.data)
        # –ø–æ–ª—É—á–∞—é –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        player_choice_number, session = await get_session_and_player_choice_number(query)

        # –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard_markup = types.InlineKeyboardMarkup()
        player_choices = session.get_player_choices()

        # –≤—ã—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å
        for player_choice in player_choices:
            keyboard_markup.add(types.InlineKeyboardButton(str(player_choice),
                                                           callback_data=f'shot_in_room{player_choice}'))

        await bot.send_message(query.from_user.id, session.get_message_for_player_shots(),
                               reply_markup=keyboard_markup, parse_mode='Markdown')

    except Exception:
        print(traceback.format_exc())
        await bot.send_message(query.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, ü§∑üèº‚Äç‚ôÄÔ∏è –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
                               reply_markup=MainKeyboard())


''' –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò –°–´–ì–†–ê–¢–¨ play_gold '''


@dp.callback_query_handler(lambda cb: cb.data in ['play_gold'])
async def play_gold(query: types.CallbackQuery):
    try:

        print('–ò–ì–†–ê –ù–ê –ó–û–õ–û–¢–û')
        # –ø–æ–ª—É—á–∞—é –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–µ—Å—Å–∏—é
        player_choice_number, session = await get_session_and_player_choice_number(query)

        print(player_choice_number)

        # –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard_markup = types.InlineKeyboardMarkup()
        player_choices = list(range(1, 4))

        TAKE_GOLD = '–£–ì–ê–î–ê–ô –ß–ò–°–õ–û –û–¢ 1 –î–û 3'

        # –≤—ã—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å
        for player_choice in player_choices:
            keyboard_markup.add(types.InlineKeyboardButton(str(player_choice),
                                                           callback_data=f'take_gold{player_choice}'))

        await bot.send_message(query.from_user.id, TAKE_GOLD,
                               reply_markup=keyboard_markup, parse_mode='Markdown')

    except Exception:
        print(traceback.format_exc())
        await bot.send_message(query.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, ü§∑üèº‚Äç‚ôÄÔ∏è –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
                               reply_markup=MainKeyboard())


''' –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò –í–´–ë–û–†–ê –ß–ò–°–õ–ê (–°–´–ì–†–ê–¢–¨) '''


@dp.callback_query_handler(lambda cb: cb.data in ['take_gold1', 'take_gold2', 'take_gold3', 'take_gold4', 'take_gold5'])
async def take_gold(query: types.CallbackQuery):
    try:
        print('–ò–ì–†–ê –ù–ê –ó–û–õ–û–¢–û –í–´–ë–ò–†–ê–Æ –ß–ò–°–õ–û take_gold')
        # –ø–æ–ª—É—á–∞—é –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        player_choice_number, session = await get_session_and_player_choice_number(query)

        # –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard_markup = types.InlineKeyboardMarkup()

        choices = list(range(1, 4))

        win_choice = random.choice(choices)

        print(win_choice, 'win_choice')

        player_choices = session.get_player_choices()

        if win_choice == int(player_choice_number):
            # –≤—ã—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å
            for player_choice in player_choices:
                keyboard_markup.add(
                    types.InlineKeyboardButton(str(player_choice), callback_data=f'next_room{player_choice}'))
            await bot.send_message(chat_id=query.from_user.id, text='–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ 500 –∑–æ–ª–æ—Ç–∞. –ö—É–¥–∞ –¥–∞–ª—å—à–µ?',
                                   reply_markup=keyboard_markup, parse_mode='Markdown')

        else:
            for player_choice in player_choices:
                keyboard_markup.add(
                    types.InlineKeyboardButton(str(player_choice), callback_data=f'next_room{player_choice}'))

            await bot.send_message(query.from_user.id, text='–í–´ –ü–†–û–ò–ì–†–ê–õ–ò',
                                   reply_markup=FinishKeyboard(), parse_mode='Markdown')


    except Exception as ex:
        print(ex)
        print(traceback.format_exc())
        await bot.send_message(query.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, ü§∑üèº‚Äç‚ôÄÔ∏è –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
                               reply_markup=MainKeyboard())


''' –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò –í–°–ö–†–´–¢–¨ open_up '''


@dp.callback_query_handler(lambda cb: cb.data in ['open_up'])
async def open_up(query: types.CallbackQuery):
    try:
        print('–û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò –í–°–ö–†–´–¢–¨ open_up')
        # –ø–æ–ª—É—á–∞—é –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–µ—Å—Å–∏—é
        player_choice_number, session = await get_session_and_player_choice_number(query)

        print(player_choice_number)

        # –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard_markup = types.InlineKeyboardMarkup()
        player_choices = list(range(1, 4))

        answer = '–£–ì–ê–î–ê–ô –ß–ò–°–õ–û –û–¢ 1 –î–û 3'

        # –≤—ã—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å
        for player_choice in player_choices:
            keyboard_markup.add(types.InlineKeyboardButton(str(player_choice),
                                                           callback_data=f'open_up{player_choice}'))

        await bot.send_message(query.from_user.id, answer,
                               reply_markup=keyboard_markup, parse_mode='Markdown')

    except Exception as ex:
        print(ex)
        print(traceback.format_exc())
        await bot.send_message(query.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, ü§∑üèº‚Äç‚ôÄÔ∏è –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
                               reply_markup=MainKeyboard())


''' –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò –í–´–ë–ò–†–ê –ß–ò–°–õ–ê (–í–°–ö–†–´–¢–¨) '''


@dp.callback_query_handler(lambda cb: cb.data in ['open_up1', 'open_up2', 'open_up3'])
async def open_up_number(query: types.CallbackQuery):
    try:
        print(' –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò –í–´–ë–ò–†–ê –ß–ò–°–õ–ê (–í–°–ö–†–´–¢–¨) ')
        # –ø–æ–ª—É—á–∞—é –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        player_choice_number, session = await get_session_and_player_choice_number(query)

        # –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard_markup = types.InlineKeyboardMarkup()
        player_choices = session.get_player_choices()

        if player_choices == random.choice(list(range(1, 4))):
            win_gold = '–í–ê–ú –ü–û–í–ï–ó–õ–û, –í–´ –ü–û–î–û–ë–†–ê–õ–ò –ö–û–î –û–¢ –î–í–ï–†–ò –ò –í–´ –°–ú–û–ì–õ–ò –í–´–ô–¢–ò –ù–ê–†–£–ñ–£, –ß–¢–û –î–ê–õ–¨–®–ï?'

            # –≤—ã—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å
            for player_choice in player_choices:
                keyboard_markup.add(
                    types.InlineKeyboardButton(str(player_choice), callback_data=f'next_room{player_choice}'))

            await bot.send_message(query.from_user.id, win_gold,
                                   reply_markup=keyboard_markup, parse_mode='Markdown')

        else:
            await bot.send_message(query.from_user.id,
                                   text='–í–ù–ï–ó–ê–ü–ù–û –í –ö–û–ú–ù–ê–¢–£ –í–û–†–í–ê–õ–°–Ø –í–ê–ú–ü–£–° - –í–´ –ü–†–û–ò–ì–†–ê–õ–ò, –ß–¢–û –î–ê–õ–¨–®–ï?',
                                   reply_markup=FinishKeyboard(), parse_mode='Markdown')

    except Exception as ex:
        print(ex)
        print(traceback.format_exc())
        await bot.send_message(query.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, ü§∑üèº‚Äç‚ôÄÔ∏è –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
                               reply_markup=MainKeyboard())


''' CALLBACK –î–õ–Ø –í–´–ë–û–†–ê –í–´–°–¢–†–ï–õ–ê '''
shot_in_rooms = ['shot_in_room1', 'shot_in_room2', 'shot_in_room3', 'shot_in_room4', 'shot_in_room5', 'shot_in_room6',
                 'shot_in_room7', 'shot_in_room8', 'shot_in_room9', 'shot_in_room10', 'shot_in_room11',
                 'shot_in_room12', 'shot_in_room13', 'shot_in_room14', 'shot_in_room15', 'shot_in_room16',
                 'shot_in_room17', 'shot_in_room18', 'shot_in_room19', 'shot_in_room20']


@dp.callback_query_handler(lambda cb: cb.data in shot_in_rooms)
async def shot_in_room(query: types.CallbackQuery):
    try:
        print('–í–´–°–¢–†–ï–õ')

        # –ø–æ–ª—É—á–∞—é –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        player_choice_number, session = await get_session_and_player_choice_number(query)

        if player_choice_number == session.wumpus.location:
            answer = '–ü–û–ó–î–†–ê–í–õ–Ø–Æ, –í–´ –ü–û–ë–ï–î–ò–õ–ò!!!'

        else:
            answer = '–í–ê–ú–ü–£–° –ü–û–ë–ï–î–ò–õ'

        await bot.send_message(query.from_user.id, answer,
                               reply_markup=FinishKeyboard(), parse_mode='Markdown')

    except Exception as ex:
        print(ex)
        print(traceback.format_exc())
        await bot.send_message(query.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, ü§∑üèº‚Äç‚ôÄÔ∏è –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
                               reply_markup=MainKeyboard())


async def get_session_and_player_choice_number(query):
    filter_player_choice_data = list(filter(str.isdigit, query.data))
    player_choice_number = ''.join(filter_player_choice_data)
    # –ø–æ–ª—É—á–∞—é –¥–∞—Ç—É –∏–∑ –±–∞–∑—ã
    answer = await db.wumpus.find_one({"tgid": query.from_user.id})
    answer_session = answer['session']
    session_dict = json.loads(answer_session)
    # —Å–æ–∑–¥–∞—é —Å–µ—Å—Å–∏—é
    session = Session(session_dict['tgid'])
    # –ø–æ–ª—É—á–∞—é –æ–±—Ö–µ–∫—Ç
    session.get_from_db(session_dict)
    return player_choice_number, session


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
